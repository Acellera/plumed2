// This document is formatted for Doxygen
/**
\mainpage Introduction

This is the developer manual. Please first have a look at the <a href="../../user-doc/html/index.html"> user manual </a>.

Plumed 2.0 is written in C++ and uses many of the advanced, object-oriented features of this language.  This structure makes the implementation of collective coordinates and free energy methods straightforward.  In fact, it should be possible to implement methods and collective coordinates (CV) by creating a single file and without touching any other part of the code. Futhermore, to implement new methodology does not require one to be some sort of C++ wizzard. Rather, the code has been specifically redisigned to make the implementation of new CVs and new free energy methods straightforward so as to encourage people to implement whatever new functionality they require.  This document serves then to provide an introduction as to how to go about implementing new functionality in plumed. A good starting point is \ref INHERIT as this page contains links to parts of the manual where you can find information on how to go about implementing CV, functions and biases. Another useful page is the \subpage TOOLBOX page, which contains information on the many reusable objects that have been implemented in plumed.  

If you want to understand a little more about the code and the way that we use the various features of C++ before you start then we describe this breifly here:   

\ref ABriefIntroduction 

And finally, for the developers of MD codes, we provide information as to how to incorperate plumed into your codes here:

\ref HowToPlumedYourMD

Lastly, we ask that contributors endeavor to maintain the portability of plumed by, as much as possible, using only the STL library and lapack in modifications.  If you need to use any less standard library (e.g. Boost, Sockets) please ensure that your functionality is not installed during a default compilation.  However, do feel free to provide alternative compilation options that incorperate your functionality.

Information about C++
http://www.parashift.com/c++-faq-lite/

\defgroup TOOLBOX Tool Box
@{
The following classes can be incorporate all sorts of functionality in PLMD::Action objects.

If you implement a new class that you think might be useful to others please add it to the 
list below by including the following inside the header file.
\verbatim
\ingroup TOOLBOX
\endverbatim
@}

\defgroup MULTIINHERIT Classes for multiple inheritance
@{
Classes for multiple inheritance

To add a class to this group, just put a
\verbatim
\ingroup MULTIINHERIT 
\endverbatim
statement somwhere inside the header.
@}

\defgroup INHERIT Step by step guides
@{
Classes which can be used to create CVs, functions, biases and so on.

To add a class to this group, just put a
\verbatim
\ingroup INHERIT
\endverbatim
statement somewhere inside the header.
@}


*/
