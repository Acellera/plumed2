patch -u -l -b -F 5 --suffix=.preplumed "./AmberTools/src/sander/constants.F90" << \EOF_EOF
--- ./AmberTools/src/sander/constants.F90.preplumed
+++ ./AmberTools/src/sander/constants.F90
@@ -230,10 +230,13 @@
   ! Unusual Constants
   integer, parameter :: RETIRED_INPUT_OPTION = -10301 ! first 5 digit palindromic prime
   integer, parameter :: NO_INPUT_VALUE = 12344321  ! from Bob Duke
   _REAL_, parameter  :: NO_INPUT_VALUE_FLOAT = 12344321.d0
 
+  integer :: plumed
+  character(256) :: plumedfile
+
 contains
 
   function BinomialCoefficient(m, n) result (bioCoeff)
         
     integer, intent(in)::m,n
EOF_EOF
patch -u -l -b -F 5 --suffix=.preplumed "./AmberTools/src/sander/Makefile" << \EOF_EOF
--- ./AmberTools/src/sander/Makefile.preplumed
+++ ./AmberTools/src/sander/Makefile
@@ -18,10 +18,11 @@
 #************************************************************************
 #
 # Makefile for Amber 14   SANDER 
 #
 include ../config.h
+include ../../../Plumed.inc
 
 CONFIG_FILE=../config.h
 CONFIG_COMMAND=configure
 PARALLEL_TOKEN=DMPI
 
@@ -240,11 +241,11 @@
 	      $(NCSU_OBJECTS) $(XRAY_OBJS) \
 	      -lFpbsa ../lib/nxtsec.o $(EMILLIB) \
 	      $(SEBOMDLIB) \
 	      ../lib/sys.a $(NETCDFLIBF) \
 	      $(FLIBS_RISMSANDER) $(FLIBS_FFTW3) $(FLIBSF) \
-	      $(LDFLAGS) $(AMBERLDFLAGS)  $(LIOLIBS)
+	      $(LDFLAGS) $(AMBERLDFLAGS)  $(LIOLIBS) $(PLUMED_LOAD)
 
 #---------------------------------------------------------------------------
 $(BINDIR)/sander.MPI$(SFX): libsqm $(MMOBJ) $(QMOBJ) $(FULLPIMDOBJ) $(EMIL) \
               $(LSCIVROBJ) $(EVBOBJ) force.o \
               $(SEBOMDOBJ) sebomd \
@@ -253,11 +254,11 @@
               $(FULLPIMDOBJ) $(LSCIVROBJ) $(EVBOBJ) force.o \
 	      -L$(LIBDIR) -lsqm -lFpbsa $(EMILLIB) \
 	      $(SEBOMDLIB) \
 	      ../lib/nxtsec.o ../lib/sys.a $(NCSU_OBJECTS) $(NETCDFLIBF) \
 	      $(FLIBS_RISMSANDER) $(FLIBS_FFTW3) $(FLIBSF) \
-	      $(LDFLAGS) $(AMBERLDFLAGS)  $(LIOLIBS)
+	      $(LDFLAGS) $(AMBERLDFLAGS)  $(LIOLIBS) $(PLUMED_LOAD)
 
 
 #---------------------------------------------------------------------------
 $(BINDIR)/sander.PUPIL$(SFX): libsqm $(PUPILOBJ) $(QMOBJ) $(FULLPIMDOBJ) $(EMIL) \
 		$(LSCIVROBJ)  syslib \
@@ -279,11 +280,11 @@
 	$(FC) $(FPPFLAGS) $(FFLAGS) $(AMBERFFLAGS) -o $@ $(LESOBJ) $(PARTPIMDOBJ) $(LSCIVROBJ) \
 		$(XRAY_OBJS) -L$(LIBDIR) -lsqm -lFpbsa $(EMILLIB) \
 	        $(SEBOMDLIB) \
 		../lib/nxtsec.o ../lib/sys.a $(NCSU_OBJECTS) $(NETCDFLIBF) \
 	      	$(FLIBS_RISMSANDER) $(FLIBS_FFTW3) $(FLIBSF) \
-		$(LDFLAGS) $(AMBERLDFLAGS)  $(LIOLIBS)
+		$(LDFLAGS) $(AMBERLDFLAGS)  $(LIOLIBS) $(PLUMED_LOAD)
 
 #---------------------------------------------------------------------------
 $(BINDIR)/sander.LES.MPI$(SFX): libsqm $(LESOBJ) $(EVBPIMD) \
         $(PARTPIMDOBJ) syslib ../lib/nxtsec.o \
 	    netlib libpbsa librism_mpi $(EMIL) \
@@ -292,11 +293,11 @@
         $(PARTPIMDOBJ) $(LSCIVROBJ) \
 		-L$(LIBDIR) -lsqm -lFpbsa $(EMILLIB) \
 	        $(SEBOMDLIB) \
 		../lib/nxtsec.o ../lib/sys.a $(NCSU_OBJECTS) $(NETCDFLIBF) \
 	      	$(FLIBS_RISMSANDER) $(FLIBS_FFTW3) $(FLIBSF) \
-		$(LDFLAGS) $(AMBERLDFLAGS) $(LIOLIBS)
+		$(LDFLAGS) $(AMBERLDFLAGS) $(LIOLIBS) $(PLUMED_LOAD)
 
 #---------------------------------------------------------------------------
 $(BINDIR)/sander.APBS$(SFX): libsqm $(APBSOBJ) $(QMOBJ) \
               $(LSCIVROBJ) $(FULLPIMDOBJ) $(NCSU_OBJECTS) \
               force.APBS.o syslib librism $(EMIL) \
EOF_EOF
patch -u -l -b -F 5 --suffix=.preplumed "./AmberTools/src/sander/mdread.F90" << \EOF_EOF
--- ./AmberTools/src/sander/mdread.F90.preplumed
+++ ./AmberTools/src/sander/mdread.F90
@@ -9,11 +9,12 @@
 
    use file_io_dat
    use lmod_driver, only : read_lmod_namelist
    use qmmm_module, only : qmmm_nml,qmmm_struct, qm_gb
    use constants, only : RETIRED_INPUT_OPTION, zero, one, two, three, seven, &
-                         eight, NO_INPUT_VALUE_FLOAT, NO_INPUT_VALUE
+                         eight, NO_INPUT_VALUE_FLOAT, NO_INPUT_VALUE, &
+                         plumed, plumedfile
    use constantph, only : mccycles
    use amoeba_mdin, only: AMOEBA_read_mdin, iamoeba
    use nose_hoover_module, only: nchain  ! APJ
    use lscivr_vars, only: ilscivr, icorf_lsc
    use pimd_vars, only: ipimd,itimass
@@ -135,11 +136,11 @@
          itgtmd,tgtrmsd,tgtmdfrc,tgtfitmask,tgtrmsmask, dec_verbose, &
          idecomp,temp0les,restraintmask,restraint_wt,bellymask, &
          noshakemask,crgmask, iwrap_mask,mmtsb_switch,mmtsb_iterations, &
          rdt,icnstph,solvph,ntcnstph,ntrelax, mccycles, &
          ifqnt,ievb, ipimd, itimass, ineb,profile_mpi, ilscivr, icorf_lsc, &
-         ipb, inp, &
+         ipb, inp, plumed,plumedfile, &
          gbneckscale, & 
          gbalphaH,gbbetaH,gbgammaH, &
          gbalphaC,gbbetaC,gbgammaC, &
          gbalphaN,gbbetaN,gbgammaN, &
          gbalphaOS,gbbetaOS,gbgammaOS, &
@@ -255,10 +256,13 @@
    tempi = ZERO
    ntb = NO_INPUT_VALUE
    ntt = 0
    nchain = 1
    temp0 = 300.0d0
+   plumed = 0
+   plumedfile = 'plumed.dat'
+
 #ifdef LES
    ! alternate temp for LES copies, if negative then use single bath
    ! single bath not the same as 2 baths with same target T
    temp0les = -ONE
    rdt = ZERO
@@ -590,10 +594,15 @@
       call mexit(6,1)
    end if
 
    if ( igb == 10 .and. ipb == 0 ) ipb = 2
    if ( igb == 0  .and. ipb /= 0 ) igb = 10
+
+   if (plumed.eq.1) then
+     write(6, '(1x,a,/)') 'PLUMED is on'
+     write(6, '(1x,a,a,/)') 'PLUMEDfile is ',plumedfile
+   endif
    
    if (ifqnt == NO_INPUT_VALUE) then
       ifqnt = 0 ! default value
       if (mdin_qmmm) then
          write(6, '(1x,a,/)') &
EOF_EOF
patch -u -l -b -F 5 --suffix=.preplumed "./AmberTools/src/sander/runmd.F90" << \EOF_EOF
--- ./AmberTools/src/sander/runmd.F90.preplumed
+++ ./AmberTools/src/sander/runmd.F90
@@ -47,11 +47,11 @@
    use full_pimd_vars, only: totener,totenert,totenert2,mybeadid
 
    use qmmm_module, only : qmmm_nml,qmmm_struct, qmmm_mpi, qm2_struct, &
                            qmmm_vsolv
    use file_io_dat
-   use constants, only : third, ten_to_minus3
+   use constants, only : third, ten_to_minus3, plumed, plumedfile
    use trace
    use stack
    use decomp, only : nat, nrs, decpr, jgroup, indx, irespw, &
 #ifdef MPI
    ! -- ti decomp
@@ -323,10 +323,15 @@
    _REAL_ :: xold(3*natom)
    _REAL_ :: corrected_energy
    _REAL_ :: kinetic_E_save(2)
    integer :: aqmmm_flag 
 
+! variables for plumed
+   _REAL_ :: plumed_box(3,3),plumed_virial(3,3), plumed_kbt
+   integer :: plumed_version,plumed_stopflag
+   _REAL_ :: plumed_energyUnits,plumed_timeUnits,plumed_lengthUnits
+
    !==========================================================================
   
    call trace_enter( 'runmd' )
 
    !     ----- INITIALIZE SOME VARIABLES -----
@@ -733,10 +738,51 @@
    
    ener%cmt(1:4) = 0.d0
    nitp = 0
    nits = 0
 
+! init PLUMED
+   if(plumed.eq.1) then
+     call plumed_f_gcreate()
+#ifdef DPREC
+     call plumed_f_gcmd("setRealPrecision"//char(0),8)
+#else
+     call plumed_f_gcmd("setRealPrecision"//char(0),4)
+#endif
+     call plumed_f_gcmd("getApiVersion"//char(0),plumed_version)
+     if(plumed_version>1)then
+       plumed_kbt=2.0*temp0*boltz2
+       call plumed_f_gcmd("setKbT"//char(0),plumed_kbt)
+     endif
+     plumed_energyUnits=4.184
+     plumed_lengthUnits=0.1
+     plumed_timeUnits=1.0
+     call plumed_f_gcmd("setMDEnergyUnits"//char(0),plumed_energyUnits)
+     call plumed_f_gcmd("setMDLengthUnits"//char(0),plumed_lengthUnits)
+     call plumed_f_gcmd("setMDTimeUnits"//char(0),plumed_timeUnits)
+     call plumed_f_gcmd("setPlumedDat"//char(0),trim(adjustl(plumedfile))//char(0))
+     call plumed_f_gcmd("setNatoms"//char(0),nr)
+     call plumed_f_gcmd("setMDEngine"//char(0),"amber");
+     call plumed_f_gcmd("setTimestep"//char(0),dt);
+#  ifdef MPI
+     call plumed_f_gcmd("setMPIFComm"//char(0),commsander)
+#  endif
+
+     call plumed_f_gcmd("init"//char(0),0);
+
+
+!     if(ifbox/=0 .and. ifbox/=1 .and. ifbox/=2) then
+!      write (6,*) "!!!!! PLUMED ERROR: Only orthorhombic and truncted octahedron cells are supported in this release."
+!      write (6,*) "!!!!! ABORTING RUN"
+!      stop
+!     endif
+!     call init_metadyn(nr,dt,amass,xx(l15),ifbox,0,trim(adjustl(plumedfile))//char(0))
+     continue
+   endif
+ ! end init PLUMED
+
+
 
    !=======================================================================
    !     ----- MAKE A FIRST DYNAMICS STEP -----
    !=======================================================================
    !  init = 3:  general startup if not continuing a previous run
@@ -898,10 +944,68 @@
       ! local NMR step counter and MTMDUNSTEP to decrease the local MTMD step
       ! counter
       call nmrdcp
       call mtmdunstep
 
+   !PLUMED force added
+   plumed_stopflag=0
+   if(plumed.eq.1) then
+     call plumed_f_gcmd("setStep"//char(0),nstep)
+     call plumed_f_gcmd("setPositions"//char(0),x)
+     call plumed_f_gcmd("setMasses"//char(0),amass)
+     call plumed_f_gcmd("setCharges"//char(0),xx(l15))
+     call plumed_f_gcmd("setEnergy"//char(0),ener%pot)
+     call plumed_f_gcmd("setForces"//char(0),f)
+     call plumed_f_gcmd("setStopFlag"//char(0),plumed_stopflag)
+     plumed_box=0.0
+     if(ifbox==0) then
+       continue
+     else if(ifbox==1) then
+       plumed_box(1,1)=box(1)
+       plumed_box(2,2)=box(2)
+       plumed_box(3,3)=box(3)
+     else if(ifbox==2) then
+! truncated octahedron, corresponding to a bcc lattice
+! in AMBER convention, box(1) is the length of the lattice vector
+! a is defined so as the bcc lattice is (a/2,a/2,a/2) (-a/2,-a/2,a/2) (a/2,-a/2,-a/2)
+       plumed_box(1,1)=sqrt(1.0/3.0)*box(1)
+       plumed_box(2,1)=sqrt(1.0/3.0)*box(1)
+       plumed_box(3,1)=sqrt(1.0/3.0)*box(1)
+       plumed_box(1,2)=-sqrt(1.0/3.0)*box(1)
+       plumed_box(2,2)=-sqrt(1.0/3.0)*box(1)
+       plumed_box(3,2)=sqrt(1.0/3.0)*box(1)
+       plumed_box(1,3)=sqrt(1.0/3.0)*box(1)
+       plumed_box(2,3)=-sqrt(1.0/3.0)*box(1)
+       plumed_box(3,3)=-sqrt(1.0/3.0)*box(1)
+     else
+      write (6,*) "!!!!! PLUMED ERROR: Only orthorhombic and truncted octahedron cells are supported in this release."
+      write (6,*) "!!!!! ABORTING RUN"
+      stop
+     endif
+     plumed_virial=0.0
+     plumed_virial(1,1)=2.0*ener%vir(1)
+     plumed_virial(2,2)=2.0*ener%vir(2)
+     plumed_virial(3,3)=2.0*ener%vir(3)
+     call plumed_f_gcmd("setVirial"//char(0),plumed_virial)
+     call plumed_f_gcmd("setBox"//char(0),plumed_box)
+     call plumed_f_gcmd("calc"//char(0),0);
+#ifdef MPI
+! this is required since PLUMED only updates virial on master processor
+#ifdef DPREC
+     call mpi_bcast(plumed_virial,9,MPI_DOUBLE_PRECISION,0,commsander,ierr)
+#else
+     call mpi_bcast(plumed_virial,9,MPI_REAL,0,commsander,ierr)
+#endif
+#endif
+     ener%vir(1)=0.5*plumed_virial(1,1)
+     ener%vir(2)=0.5*plumed_virial(2,2)
+     ener%vir(3)=0.5*plumed_virial(3,3)
+   end if
+
+   !PLUMED end
+
+
 #ifdef MPI /* SOFT CORE */
       ! If softcore potentials are used, collect their dvdl contributions:
       if ( ifsc /= 0 ) then
          call mpi_reduce(sc_dvdl, sc_tot_dvdl, 1, MPI_DOUBLE_PRECISION, &
                          MPI_SUM, 0, commsander, ierr)
@@ -1546,10 +1650,72 @@
    if ((icnstph == 1) .and. (mod(irespa+mdloop*nstlim,ntcnstph) == 0)) then
       call cnstphendstep(xx(l190), xx(l15), ener%pot%dvdl, temp0, solvph)
       if (master) call cnstphwrite(rem)
    end if
 
+   !PLUMED force added
+   if(plumed.eq.1) then
+     plumed_stopflag=0
+     call plumed_f_gcmd("setStep"//char(0),nstep)
+     call plumed_f_gcmd("setPositions"//char(0),x)
+     call plumed_f_gcmd("setMasses"//char(0),amass)
+     call plumed_f_gcmd("setCharges"//char(0),xx(l15))
+     call plumed_f_gcmd("setEnergy"//char(0),ener%pot)
+     call plumed_f_gcmd("setForces"//char(0),f)
+     call plumed_f_gcmd("setStopFlag"//char(0),plumed_stopflag)
+     plumed_box=0.0
+     if(ifbox==0) then
+       continue
+     else if(ifbox==1) then
+       plumed_box(1,1)=box(1)
+       plumed_box(2,2)=box(2)
+       plumed_box(3,3)=box(3)
+     else if(ifbox==2) then
+! truncated octahedron, corresponding to a bcc lattice
+! in AMBER convention, box(1) is the length of the lattice vector
+! a is defined so as the bcc lattice is (a/2,a/2,a/2) (-a/2,-a/2,a/2) (a/2,-a/2,-a/2)
+       plumed_box(1,1)=sqrt(1.0/3.0)*box(1)
+       plumed_box(2,1)=sqrt(1.0/3.0)*box(1)
+       plumed_box(3,1)=sqrt(1.0/3.0)*box(1)
+       plumed_box(1,2)=-sqrt(1.0/3.0)*box(1)
+       plumed_box(2,2)=-sqrt(1.0/3.0)*box(1)
+       plumed_box(3,2)=sqrt(1.0/3.0)*box(1)
+       plumed_box(1,3)=sqrt(1.0/3.0)*box(1)
+       plumed_box(2,3)=-sqrt(1.0/3.0)*box(1)
+       plumed_box(3,3)=-sqrt(1.0/3.0)*box(1)
+     else
+      write (6,*) "!!!!! PLUMED ERROR: Only orthorhombic and truncted octahedron cells are supported in this release."
+      write (6,*) "!!!!! ABORTING RUN"
+      stop
+     endif
+     plumed_virial=0.0
+! It's not completely clear where the factor 2.0 comes from
+! Anyway, I was able to match a change in press of 1000 bar with
+! a corresponding SLOPE=66.02 added to VOLUME CV in PLUMED
+! GB
+     plumed_virial(1,1)=2.0*ener%vir(1)
+     plumed_virial(2,2)=2.0*ener%vir(2)
+     plumed_virial(3,3)=2.0*ener%vir(3)
+     call plumed_f_gcmd("setVirial"//char(0),plumed_virial)
+     call plumed_f_gcmd("setBox"//char(0),plumed_box)
+     call plumed_f_gcmd("calc"//char(0),0);
+#ifdef MPI
+! this is required since PLUMED only updates virial on master processor
+#ifdef DPREC
+     call mpi_bcast(plumed_virial,9,MPI_DOUBLE_PRECISION,0,commsander,ierr)
+#else
+     call mpi_bcast(plumed_virial,9,MPI_REAL,0,commsander,ierr)
+#endif
+#endif
+     ener%vir(1)=0.5*plumed_virial(1,1)
+     ener%vir(2)=0.5*plumed_virial(2,2)
+     ener%vir(3)=0.5*plumed_virial(3,3)
+   end if
+
+   !PLUMED end
+
+
 #ifdef MPI
    ! If softcore potentials are used, collect their dvdl contributions:
    if ( ifsc /= 0 ) then
       call mpi_reduce(sc_dvdl, sc_tot_dvdl, 1, MPI_DOUBLE_PRECISION, &
                       MPI_SUM, 0, commsander, ierr)
@@ -3991,10 +4157,12 @@
     abfqmmm_param%v(1:nr3+iscale) = v(1:nr3+iscale)    ! lam81
     deallocate(for, stat=ier)                          ! lam81 
     return                                             ! lam81
    end if                                              ! lam81
 
+   if (plumed_stopflag/=0) goto 480
+
    if (nstep < nstlim) goto 260
    480 continue
 
 #ifdef MPI     
 ! ------====== REMD Post-Dynamics ======------
@@ -4202,10 +4370,12 @@
    if( icfe /= 0 ) then
       deallocate( frcti, stat = ier )
       REQUIRE( ier == 0 )
    end if
 
+   call plumed_f_gfinalize()
+
    500 format(/,' NMR restraints on final step:'/)
    540 format(/5x,' A V E R A G E S   O V E R ',i7,' S T E P S',/)
    541 format(/5x,' DV/DL, AVERAGES OVER ',i7,' STEPS',/)
    542 format('|',79('='))
    550 format(/5x,' R M S  F L U C T U A T I O N S',/)
EOF_EOF
patch -u -l -b -F 5 --suffix=.preplumed "./AmberTools/src/sander/sander.F90" << \EOF_EOF
--- ./AmberTools/src/sander/sander.F90.preplumed
+++ ./AmberTools/src/sander/sander.F90
@@ -17,11 +17,11 @@
       ncsu_on_sander_init => on_sander_init, &
       ncsu_on_sander_exit => on_sander_exit
 #endif /* DISABLE_NCSU */
 
    use lmod_driver
-   use constants, only : INV_AMBER_ELECTROSTATIC
+   use constants, only : INV_AMBER_ELECTROSTATIC, plumed, plumedfile
    ! The main qmmm_struct contains all the QMMM variables and arrays
    use qmmm_module, only : qmmm_nml, qmmm_struct, deallocate_qmmm, qmmm_mpi, &
 #ifdef MPI
          qmmm_mpi_setup, &
 #endif
@@ -954,10 +954,13 @@
    else                    ! lam81
    call deallocate_stacks  ! lam81             
    call stack_setup()      ! lam81
    end if                  ! lam81
 
+   call mpi_bcast(plumed,1,MPI_INTEGER,0,commsander,ierr)
+   call mpi_bcast(plumedfile,256,MPI_CHARACTER,0,commsander,ierr)
+
    ! GMS: Broadcast parameters from module 'molecule'
    call mpi_bcast(mol_info%natom,1,mpi_integer,0,commsander,ierr)
    call mpi_bcast(mol_info%nres,1,mpi_integer,0,commsander,ierr)
    call mpi_barrier(commsander,ierr)
 
EOF_EOF
