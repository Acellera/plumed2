#! /bin/bash
rm -rf automatic
mkdir automatic

# Check for files that register actions with no documentation
rm errors
for file in ../src/*.cpp
do
  nreg=`grep "PLUMED_REGISTER_ACTION" $file | wc -l | awk '{print $1}'`
  if [ $nreg -gt 0 ] ; then
       ndoc=`grep PLUMEDOC $file | wc -l | awk '{print $1}'`
       if [ $ndoc -eq 0 ] ; then
          echo The following file registered an action but provided no documentation: $file >> errors
       fi
  fi 
done

# Create the list of codes that plumed works with from the set of available patches
for file in ../patches/*.config
do
   echo "- $file" | sed -e 's/.config//' | sed -e 's/..\/patches\///' >> automatic/codes.list
done

## Check for utilities that register actions with no documentation
#for file in ../utilities/*.cpp
#do
#  ndoc=`grep PLUMEDOC $file | grep TOOL | wc -l | awk '{print $1}'`
#  if [ $ndoc -eq 0 ] ; then
#     echo The following utility has been provided without documentation: $file >> errors
#  fi
#done

# Generate all the documentation for colvar modifiers
rm -f modifier_file
echo "\\section mod Working with distributions" > modifier_file
echo "As described above you can use this colvar to calculate one or multiple CVs.  Obviously, if you have calculated multiple CVs then you have a distribution of CVs.  Plumed allows you to calculate a number of functions of this distribution.  These quantities and their derivatives are then stored as the values of the colvar.  N.B.  You cannot calcualte the values of the colvars and these functions of the distribution from a single line in input.  You can however calculate multiple functions of the distribution." >> modifier_file
echo "<table align=center frame=void width=95%% cellpadding=5%%>" >> modifier_file
cat ../*/*cpp |
awk '{
  if($1=="//+ENDPLUMEDOC" && inside==1){
     print "</td> </tr>" >> "modifier_file" 
     inside=0
  }
  if(inside && $1!="/**" && $1!="*/") print $0 >> "modifier_file"
  if($1=="//+PLUMEDOC"){
     if($2=="MODIFIER"){
        print "<tr> <td width=5%> <b> ", $3, " </b></td>" >> "modifier_file"
        print "<td>" >> "modifier_file"   
        inside=1;
     }
  } 
}'  
echo "</table>" >> modifier_file

# Generate all the documentation pages from comments
cat ../*/*cpp |
awk '{
  if($1=="//+ENDPLUMEDOC"){
     inside=0;
     print "*/" >output
  }
  if(inside==2 && NF==0){
     print "</td> </tr>" > lfile
     inside=1
  }
  if(inside==1 && $1!="/**" && $1!="*/") print $0 >output
  if(inside==2 && $1!="/**" && $1!="*/" ){
     print $0 > output
     print $0 > lfile
  }
  if($1=="//+PLUMEDOC"){
    if( $2=="TOPOLOGY" || $2=="COLVAR" || $2=="FUNCTION" || $2=="ANALYSIS" || $2=="BIAS" || $2=="VATOM" || $2=="GENERIC" || $2=="TOOLS" ){
      lfile="automatic/"$2".list"
      
      print "<tr> <td width=5%> \\subpage ", $3,"</td> <td>" > lfile
      output="automatic/"$3".tmp";
      print "/**" > output
      print "\\page "$3 > output
      print "\\section "$3 >output
      inside=2;
    }
  }
}'

# Generate all the documentation from keywords
source ../sourceme.sh
for file in automatic/*.tmp
do
  foundexample=`grep "\par Examples" $file | wc -l | awk '{print $1}'`
  flag=`echo $file | sed -e 's/.tmp//g' | sed -e 's/automatic\///g'`
  ../src/plumed manual --action=$flag > automatic/$flag.man 2> shit
  rm shit 
  check=`wc -l automatic/$flag.man | awk '{print $1}'`
  if [ $check -eq 0 ] ; then 
     echo Full manual for action $flag will not be generated as you are building the manual from a code where this action was not compiled >> errors
  elif [ $foundexample -eq 0 ] 
  then
    echo There are no examples inside documentation for action: $flag >> errors
  fi
  cat automatic/$flag.tmp |
    { 
     while read -r LINE ;
      do
        if [ "$LINE" = "\par Examples" ]
        then
          cat automatic/$flag.man 
          iscol=`grep $flag automatic/COLVAR.list | wc -l`
          if [ $iscol -gt 0 ] ; then
               fname=`grep PLUMED_REGISTER_ACTION ../src/*.cpp | grep $flag | sed -e 's/:/ /g' | awk '{print $1}'`
               hasmod=`grep MultiColvar $fname | wc -l | awk '{print $1}'` 
               if [ $hasmod -gt 0 ] ; then
                    cat modifier_file
               fi
          fi
          echo -E "$LINE"
        else
          echo -E "$LINE"
        fi
      done
    } > automatic/$flag.txt
done

for file in Bias Colvar Functions Installation Intro
do

cat $file.txt |
{
 while read -r LINE ;
  do
  if [ "$LINE" = "@COLVAR@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/COLVAR.list
    echo "</table>"
  elif [ "$LINE" = "@ANALYSIS@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/ANALYSIS.list
    echo "</table>"
  elif [ "$LINE" = "@BIAS@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/BIAS.list
    echo "</table>"
  elif [ "$LINE" = "@FUNCTION@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/FUNCTION.list
    echo "</table>"
  elif [ "$LINE" = "@TOPOLOGY@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/TOPOLOGY.list
    echo "</table>"
  elif [ "$LINE" = "@VATOM@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/VATOM.list
    echo "</table>"
  elif [ "$LINE" = "@TOOLS@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/TOOLS.list
    echo "</table>" 
  elif [ "$LINE" = "@CODES@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/codes.list
    echo "</table>"
  else
    echo -E "$LINE"
  fi
   done
} > ${file}PP.txt
done
