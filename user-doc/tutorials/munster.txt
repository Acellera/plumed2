/**
\page munster Munster tutorial

This document describes the PLUMED tutorial held in Munster, March 2015.
The aim of this tutorial is to learn how to use PLUMED to analyze molecular
dynamics simulations on the fly, to analyze existing trajectories, and to
perform enhanced sampling. Although the presented input files are correct,
the users are invited to refer to the literature to understand how the
parameters of enhanced sampling methods should be chosen in a real application.

Users are also encouraged to follow the links to the full PLUMED reference documentation
and to wander around in the manual to discover the many available features
and to do the other, more complete, tutorials. Here 
we are going to present only a very narrow selection of methods.

We here use PLUMED 2.1 syntax and we explicitly note if some syntax is expected
to change in PLUMED 2.2, which will be released later in 2015.
All the tests here are performed on a toy system, alanine dipeptide in water, simulated
using the AMBER99SB force field.
Simulations are made using GROMACS 4.6.7, which is here assumed to be already patched with PLUMED and properly installed.
However, these examples could be easily converted to other MD software.

All the gromacs input files are provided in this tarball.
\todo prepare tarball with gromacs input files - I think it is not necessary to have PLUMED inputs there

Users are expected to write PLUMED input files based on the instructions below.

\section munster-toymodel Alanine dipeptide: our toy model

\todo add description of aladip

\section munster-monitor Monitoring collective variables

The main goal of PLUMED is to compute collective variables, which are complex descriptors than can be used
to analyze a conformational change or a chemical reaction. This can be done either on the fly, that is during
molecular dynamics, or a posteriori, using PLUMED as a post-processing tool. In both cases
one should create an input file with a specific PLUMED syntax. A sample input file is below:

\verbatim
# compute distance between atoms 1 and 10
d: DISTANCE ATOMS=1,10
# create a virtual atom in the center between atoms 20 and 30
center: CENTER ATOMS=20,30
# compute torsional angle between atoms 1,10,20 and center
phi: TORSION ATOMS=1,10,20,center
# compute some function of previously computed variables
d2: MATHEVAL ARG=phi FUNC=cos(x) PERIODIC=NO
# print both of them every 10 step
PRINT ARG=d,phi,d2 STRIDE=10
\endverbatim
(see \ref DISTANCE, \ref TORSION, \ref MATHEVAL, and \ref PRINT)

PLUMED works using kJ/nm/ps as energy/length/time units. This can be personalized using \ref UNITS.
Notice that variables should be given a name (in the example above, `d`, `phi`, and `d2`), which is
then used to refer to these variables. Lists of atoms should be provided as 
comma separated numbers, with no space. Virtual atoms can be created and assigned a name for later use.
You can find more information on the PLUMED syntax
at \ref Syntax page of the manual. The complete documentation for all the supported
collective variables can be found at the \ref colvarintro page.

\subsection munster-monitor-of Analyze on the fly

Here we will run a plain MD on alanine dipeptide and compute two torsional angles on the fly.
GROMACS needs a .tpr file, which is a binary file containing initial positions
as well as force-field parameters. We also provide .gro, .mdp, and .top files,
that can be modified and used to generate a new .tpr file. For this tutorial,
it is sufficient to use the provided .tpr files. Gromacs md can be run using on the command line:
\verbatim
> mdrun -s topolA.tpr -nsteps 10000
\endverbatim
The nsteps flags can be used to change the number of timesteps and topolA.tpr is the name of the tpr file.
While running, gromacs will produce an md.log file, with log information, and a traj.xtc file, with a binary trajectory.
The trajectory can be visualized with VMD using a command such as
\verbatim
> vmd confout.gro tra.xtc
\endverbatim

To run a simulation with gromacs+plumed you just need to add a -plumed flag
\verbatim
> mdrun -s topolA.tpr -nsteps 10000 -plumed plumed.dat
\endverbatim
Here plumed.dat is the name of the plumed input file. Notice that PLUMED will write
information in the md.log that could be useful to verify if the simulation has been set up properly.

Using the following PLUMED input file you can monitor \f$\phi\f$ and \f$\psi\f$ angles during the MD simulation
\verbatim
phi: TORSION ATOMS=5,7,9,15
psi: TORSION ATOMS=7,9,15,17
PRINT ARG=phi,psi STRIDE=100 FILE=colvar
\endverbatim
(see \ref TORSION and \ref PRINT)

PLUMED will write a textual file named `colvar` containing three columns: physical time, \f$\phi\f$ and \f$\psi\f$.
Results can be plotted using gnuplot:
\verbatim
> gnuplot
# this show phi as a function of time
gnuplot> plot "colvar" u 2
# this show psi as a function of time
gnuplot> plot "colvar" u 3
# this show psi as a function of phi
gnuplot> plot "colvar" u 2:3
\endverbatim

Now try to do the same using the two different initial configurations that we provided (topolA.tpr and topolB.tpr).
You should obtain a plot similar to this one

\todo graph phi,psi

Notice that the result depends heavily on the starting structure. Indeed, the two free-energy minima are
separated by a large barrier and, in such a short simulation, the system cannot cross it.
Also notice that the two clouds are well separated, indicating that these two collective variables
are good enough to properly distinguish among the two minima.

\subsection munster-monitor-dr Analyze using the driver

Imagine you already made a simulation, with or without PLUMED. You might want to compute the collective
variables a posteriori, from the trajectory file. You can do this by using the plumed executable on the command line.
Type
\verbatim
> plumed driver --help
\endverbatim
to have an idea of the possible options. See \ref driver for the full documentation.

Here we will use the driver the compute phi and psi on the already generated trajectory. Let's assume
the trajectory is named traj.xtc. You should prepare an PLUMED input file named `analysis.dat` as:
\verbatim
phi: TORSION ATOMS=5,7,9,15
psi: TORSION ATOMS=7,9,15,17
PRINT ARG=phi,psi FILE=analysis
\endverbatim
(see \ref TORSION and \ref PRINT)
Notice that typically when using the driver we do not provide a STRIDE keyword to PRINT. This implies "print at every step" which,
analyzing a trajectory, means "print for all the available snapshots". Then, you can use the following
command:
\verbatim
> plumed driver --mf_xtc traj.xtc --plumed analysis.dat
\endverbatim
Notice that PLUMED has no way to now the value of physical time from the trajectory. If you want physical time to
be printed in the `analysis` file you should give more information to the driver, e.g.:
\verbatim
> plumed driver --mf_xtc traj.xtc --plumed analysis.dat --timestep 0.002 --trajectory-stride 1000
\endverbatim
In this case we inform the driver that the `traj.xtc` file was produced in a run with a timestep of 0.002 ps and
saving a snapshop every 1000 timesteps.

You might want to analyze a different collective variable, such as the gyration radius.
The gyration radius tells how extended is the molecules in space.
You can do it with the following plumed input file

\verbatim
phi: TORSION ATOMS=5,7,9,15
psi: TORSION ATOMS=7,9,15,17

heavy: GROUP ATOMS=1,5,6,7,9,11,15,16,17,19
gyr: GYRATION ATOMS=heavy

# the same could have been achieved with
# gyr: GYRATION ATOMS=1,5,6,7,9,11,15,16,17,19

PRINT ARG=phi,psi,gyr FILE=analyze
\endverbatim
(see \ref TORSION, \ref GYRATION, and \ref PRINT)

\todo
- I checked, gromacs breaks the molecole. this is a good way to explain \ref WHOLEMOLECULES.
  Also observe that \ref GYRATION will make molecules whole by default starting with PLUMED 2.2.
- explain how to compute a histogram
- (maybe) make an example with \ref MATHEVAL

Notice that the plumed driver can also be used directly from VMD taking advantage of the PLUMED collective variable tool
developed by Toni Giorgino (http://multiscalelab.org/utilities/PlumedGUI).
Just open a recent version of VMD and go to Extensions/Analysis/Collective Variable Analsys (PLUMED).
This graphical interface can also be used to quickly build PLUMED input files based on template lines.

\section munster-biasing Biasing collective variables

We have seen that PLUMED can be used to compute collective variables. However, PLUMED
is most often use to add forces on the collective variables. To this aim,
we have implemented a variety of possible biases acting on collective variables.
A bias works in a manner conceptually similar to the \ref PRINT command, taking as argument
one or more collective variables. However, here the STRIDE is usually omitted (that is equivalent to setting it to 1), which means
that forces are applied at every timestep. In PLUMED 2.2 you will be able to change the STRIDE also for bias potentials,
but that's another story.
In the following we will see how to apply harmonic restraints
and haw to build an adaptive bias potential with metadynamics. The complete documentation for
all the biasing methods available in PLUMED can be found at the \ref Bias page.

\subsection munster-biasing-re Using restraints

Now let's imagine that we want to force the \f$\phi\f$ angle to visit a region close to
\f$\phi=\pi/2\f$. We can do it adding a restraint in \f$\phi\f$, with the following input
\verbatim
phi: TORSION ATOMS=5,7,9,15
psi: TORSION ATOMS=7,9,15,17
res: RESTRAINT ARG=phi AT=0.5pi KAPPA=5
PRINT ARG=phi,psi,res.bias
\endverbatim
(see \ref TORSION, \ref RESTRAINT, and \ref PRINT).

Notice that here we are printing a quantity named `res.bias`. We do this because \ref RESTRAINT does not define a single
value (that here would be theoretically named `res`) but a structure with several components. All
biasing methods do so, as well as many collective variables (see e.g. \ref DISTANCE used with COMPONENTS keyword).
Printing the bias allows one to know how much a given snapshop was penalized.
Also notice that PLUMED understands numbers in the for `{number}pi`. This is convenient when using
torsions, since they are expressed in radians.

Now you can plot your trajectory with gnuplot and see the effect of KAPPA. You can also try different values
of KAPPA. The stiffer the restraint, the less the collective variable will fluctuate. However, notice 
that a too large kappa could make the MD integrator unstable.

\todo maybe an exercise looking at how fluctuations are affected by KAPPA?

A restraint can also be modified as a function of time. For example, if you want to
bring the system from one minimum to the other, you can use a moving restraint on \f$\phi\f$:
\verbatim
phi: TORSION=5,7,9,15
psi: TORSION=7,9,15,17
# notice that a long line can be splitted with this syntax
MOVINGRESTRAINT ...
# also notice that a LABEL keyword can be used and is equivalent
# to adding the name at the beginning of the line with colon, as we did so far
  LABEL=res
  ARG=phi
  STEP0=0 AT0=-0.5pi KAPPA0=5
  STEP1=10000 AT0=0.5pi 
...
PRINT ARG=phi,psi,res.work,res.phi_cntr FILE=colvar
\endverbatim
(see \ref TORSION, \ref MOVINGRESTRAINT, and \ref PRINT).

Notice that here we are plotting a few new components, namely `work` and `phi_cntr`.
The former gives the work performed in pulling the restraint, and the latter the position of the restraint.
Notice that if pulling is slow enough one can compute free energy profile from the work.

\todo maybe an exercise computing free energy from work

\subsection munster-biasing-me Metadynamics

If you do not know exactly where you would like your collective variables to go,
and just know (or suspect) that some variables have large free-energy barriers
that hinder some conformational rearrangement or some chemical reaction,
you can bias them using metadynamics. In this way, a time dependent,
adaptive potential will be constructed that tends to disfavor visited configurations
in the collective-variable space. The bias is usually built as a sum of
Gaussian deposited in the already visited states.
A sample input follows
\verbatim
phi: TORSION=5,7,9,15
psi: TORSION=7,9,15,17
METAD ARG=phi,psi HEIGHT=1.0 BIASFACTOR=10 SIGMA=0.35,0.35 PACE=100
\endverbatim
Thus, a single METAD line will contain all the metadynamics related options, such
as Gaussian height (`HEIGHT`, here in kJ/mol), stride (`PACE`, here in number of time steps),
bias factor (`BIASFACTOR`, here indicates that we are going to effectively boost
the temperature of the collective variables by a factor 10), and width (`SIGMA`, an array with
same size as the number of collective variables).

If you run a simulation with this input, PLUMED will produce an additional
`HILLS` file, containing as list of the deposited Gaussians. Notice that
the apparent height written in the `HILLS` file is not the same height that you
specified with the `HEIGHT` keyword, but is scaled by a factor \f$\gamma/(\gamma-1)\f$,
where \f$\gamma\f$ is the biasfactor. This is a technical issue and is related to the
fact that well-tempered metadynamics is only partially compensating the free-energy landscape.

Now, run a metadynamics simulations and check the explored collective variable space.
\todo Put a figure

As you can see, exploration is greatly enhanced. Moreover, you can exploit the
fact that the deposited bias potential has a relationship with the underlying free-energy landscape
and compute the latter. To this aim, you can use the command line sum_hills tool:

\verbatim
> plumed sum_hills --hills HILLS
\endverbatim
(see \ref sum_hills).


\todo
- show how to monitor the difference between minima as a function of time
- (optional) show metadynamics failure with \ref GYRATION or another variable
- show how to restart a metad simulation

\section munster-multi Using multiple replicas

\warning Notice that multireplica simulations with PLUMED are fully supported
with GROMACS, but only partly supported with other MD engines.

Some free-energy methods are intrinsically parallel and requires running
several simultaneous simulations. This can be done with gromacs using the
multi replica framework. That is, if you have 4 tpr files named topol0.tpr,
topol1.tpr, topol2.tpr, topol3.tpr you can run 4 simultaneous simulations.
\verbatim
> mpirun -np 4 mdrun_mpi -s topol.tpr -plumed plumed.dat
\endverbatim
Each of the 4 replicas will open a different topol file, and GROMACS will
take care of adding the replica number before the .tpr suffix.
PLUMED deals with the extra number in a slightly different way.
In this case, for example, PLUMED first look for a file named `plumed.dat.X`,
where X is the number of the replica.  In case the file is not found,
then PLUMED looks for `plumed.dat`. If also this is not found, PLUMED will complain.
As a consequence, if all the replicas should use the same input file it is sufficient
to put a single `plumed.dat` file, but one has also the flexibility of using separate files
named `plumed.dat.0`, `plumed.dat.1` etc. Finally, notice that 
the way PLUMED adds suffixes will change in version 2.2, and names will be `plumed.0.dat` etc.

\todo We should provide multiple tpr files, maybe something like topolA300.tpr topolA310.tpr etc. The
letter indicates the starting basin.

\subsection munster-multi-mw Using multiple-walkers metadynamics

\todo show how to quickly fill the free-energy landscape using multiple walkers
(is this section a good idea or analysis is going to be too complicated?)

\subsection munster-multi-wham Using multiple restraints with replica exchange

(is this section a good idea or analysis is going to be too complicated?)

\subsection munster-multi-ptmetad Using metadynamics with parallel tempering

\todo
- show metadynamics working properly with \ref GYRATION (hopefully!)

*/

link: @subpage munster

description: A short 3 hours tutorial

additional-files: munster.tar.gz
